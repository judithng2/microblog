{{! Use the main layout }}
{{!< main }}

{{! New Post Submission Form }}
<section class="content-container">
    {{#if loggedIn}}
        <!-- show the create post form when logged in -->
        <section class="post-form">
            <!-- make a header here -->
            <h2>Create a new Post</h2>
            <form method="POST" action="/posts">
                <!-- title input field name = "title" -->
                <!-- text area input field name = "content" -->
                <article class="vertical-list">
                    <input type="text" name="title" placeholder="Title..." required>
                    <textarea id="post-content" name="content" placeholder="Start writing..."required></textarea>

                    <div>
                        <button type="button" class="emoji-button" onclick="activeEmojiPanel()">ðŸ˜€</button>
                        <button type="submit" class="post-button" name="submit" id="submit-in">Post</button>
                    </div>
                </article>
                
            </form>

            <div id="emoji-container" style="display: none;">
                <input type="text" id="emoji-search" oninput="searchEmojis()" placeholder="Search for emojis...">
                <div id="emoji-grid"></div>
            </div>
        </section>
    {{/if}}

    <section class="vertical-list">
        <!-- recent posts -->
        <h2>Recent Posts</h2>
        <div>
            <p>Sort by:
            <button type="button" class="sort-button" onclick="sortByLike(); isActive(this)">Most Likes</button>
            <button type="button" class="sort-button activated" onclick="sortByRecent(); isActive(this)">Most Recent</button>
            </p>
        </div>
        {{#if posts.length}}
            <ul>
                {{> postList this}}
            </ul>
        {{else}}
            <p>No posts yet :C Post something!!</p>
        {{/if}}
    </section>
</section>

<script>

function isActive(button) {
    if (!button.classList.contains('activated')) {
      document.querySelectorAll(".activated").forEach(btn => btn.classList.remove('activated'));
      button.classList.add('activated');
      return;
    } 
    button.classList.remove('activated')
}

function sortByLike() {
    fetch('/sort/like')
    .then(response => response.text())  // Expecting HTML response
    .then(html => {
        const postList = document.querySelector('.vertical-list ul');
        postList.innerHTML = html;  // Insert the rendered HTML into the DOM
    })
    .catch(error => {
        console.error('Error sorting posts by likes:', error);
    });
}

function sortByRecent() {
    fetch('/')
    .then(response => response.text())
    .then(html => {
        document.body.innerHTML = html;
    })
    .catch(error => {
        console.error('Error sorting by recent:', error);
    });
}

/*
 You want to show a subset of the emojis. About 200. However,
 you also want the user to be able to search all emojis,
 so, put them in this array when the array is empty so 
 that you have them.
*/

let allEmojis = [];  // Global list to hold all emojis

function activeEmojiPanel() {
    const container = document.getElementById('emoji-container');
    container.style.display = container.style.display === 'none' ? 'block' : 'none';

    if(container.style.display === 'block' && allEmojis.length == 0){
        // go "Fetch" you some emojis and show them off with displayEmojies
        fetch('/emojis')
        .then(response => response.json())
        .then(data => {
            allEmojis = data;
            displayEmojis(allEmojis);
        })
        .catch(error => {
            console.error('Error fetching emojis:', error);
        });
    }
}

function displayEmojis(emojis, limit=100) {
    const container = document.getElementById('emoji-grid');
    container.innerHTML = '';  // Clear previous results
    if (Array.isArray(emojis) && emojis.length > 0) {
        emojis.slice(0, limit).forEach(emoji => {
            const emojiElement = document.createElement('span');
            emojiElement.textContent = emoji.character;
            emojiElement.title = emoji.slug;  // Showing the emoji name on hover
            emojiElement.style.cursor = 'pointer';
            emojiElement.onclick = () => insertEmoji(emoji.character);
            container.appendChild(emojiElement);
        });
    } else {
        container.textContent = 'No emojis found. Try a different search!';
    }
}

function searchEmojis() {
    const searchTerm = document.getElementById('emoji-search').value.toLowerCase();
    const filteredEmojis = allEmojis.filter(emoji =>
                emoji.slug.toLowerCase().includes(searchTerm)
            );
    
    displayEmojis(filteredEmojis);
}

function insertEmoji(emoji) {
    const textarea = document.getElementById('post-content');
    textarea.value += emoji;
    textarea.focus();  // Keep focus on the textarea
}
</script>

